{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar readFile = require( '@stdlib/fs-read-file' ).sync;\nvar replace = require( '@stdlib/string-replace' );\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar uppercase = require( '@stdlib/string-base-uppercase' );\n\n\n// VARIABLES //\n\nvar opts = {\n\t'encoding': 'utf8'\n};\nvar dir = join( __dirname, 'templates' );\n\n// Templates:\nvar SINGLE_COEFFICIENT_TEMPLATE = readFile( join( dir, 'single_coefficient.c.txt' ), opts ); // eslint-disable-line id-length\nvar EVALPOLY_TEMPLATE = readFile( join( dir, 'evalpoly.c.txt' ), opts );\nvar EMPTY_TEMPLATE = readFile( join( dir, 'empty.c.txt' ), opts );\nvar LOOP_TEMPLATE = readFile( join( dir, 'loop.c.txt' ), opts );\n\n\n// MAIN //\n\n/**\n* Compiles a C function string for evaluating a polynomial.\n*\n* @param {NumericArray} c - polynomial coefficients sorted in ascending degree\n* @param {Options} [options] - function options\n* @param {string} [options.dtype='double'] - input value floating-point data type\n* @param {string} [options.name='evalpoly'] - function name\n* @returns {string} function string for evaluating a polynomial\n*\n* @example\n* var str = compile( [ 3.0, 2.0, 1.0 ] );\n* // returns <string>\n*/\nfunction compile( c, options ) {\n\tvar horner;\n\tvar opts;\n\tvar str;\n\tvar n;\n\tvar m;\n\tvar i;\n\n\topts = {\n\t\t'dtype': 'double',\n\t\t'name': 'evalpoly',\n\t\t'suffix': ''\n\t};\n\tif ( arguments.length > 1 ) {\n\t\topts.dtype = options.dtype || opts.dtype;\n\t\topts.name = options.name || opts.name;\n\t}\n\tif ( opts.dtype === 'float' ) {\n\t\topts.suffix = 'f';\n\t}\n\tn = c.length;\n\n\t// If no coefficients, the function always returns 0...\n\tif ( n === 0 ) {\n\t\tstr = replace( EMPTY_TEMPLATE, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\treturn replace( str, '{{fname}}', opts.name );\n\t}\n\t// If only one coefficient, the function always returns that coefficient...\n\tif ( n === 1 ) {\n\t\tstr = c[ 0 ].toString();\n\t\tif ( isInteger( c[ 0 ] ) ) {\n\t\t\tstr += '.0';\n\t\t}\n\t\tstr = replace( SINGLE_COEFFICIENT_TEMPLATE, '{{coefficient}}', str );\n\t\tstr = replace( str, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\treturn replace( str, '{{fname}}', opts.name );\n\t}\n\tm = n - 1;\n\n\t// Avoid exceeding the maximum stack size on V8 by using a simple loop :(. Note that the choice of `500` was empirically determined...\n\tif ( n > 500 ) {\n\t\tstr = '';\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tstr += '\\t' + c[ i ].toString();\n\t\t\tif ( isInteger( c[ i ] ) ) {\n\t\t\t\tstr += '.0';\n\t\t\t}\n\t\t\tstr += '{{dtype_suffix}}';\n\t\t\tif ( i < m ) {\n\t\t\t\tstr += ',\\n';\n\t\t\t}\n\t\t}\n\t\tstr = replace( LOOP_TEMPLATE, '{{coefficients}}', str );\n\t\tstr = replace( str, '{{num_coefficients}}', n.toString() );\n\t\tstr = replace( str, '{{dtype}}', opts.dtype );\n\t\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\t\tstr = replace( str, '{{fname}}', opts.name );\n\t\treturn replace( str, '{{FNAME}}', uppercase( opts.name ) );\n\t}\n\t// If more than one coefficient, apply Horner's method...\n\thorner = c[ 0 ].toString();\n\tif ( isInteger( c[ 0 ] ) ) {\n\t\thorner += '.0';\n\t}\n\thorner += '{{dtype_suffix}}';\n\tfor ( i = 1; i < n; i++ ) {\n\t\thorner += ' + (x * ';\n\t\tif ( i < m ) {\n\t\t\thorner += '(';\n\t\t}\n\t\thorner += c[ i ].toString();\n\t\tif ( isInteger( c[ i ] ) ) {\n\t\t\thorner += '.0';\n\t\t}\n\t\thorner += '{{dtype_suffix}}';\n\t}\n\t// Close all the parentheses...\n\tfor ( i = 0; i < (2*(n-1))-1; i++ ) {\n\t\thorner += ')';\n\t}\n\tstr = c[ 0 ].toString();\n\tif ( isInteger( c[ 0 ] ) ) {\n\t\tstr += '.0';\n\t}\n\tstr = replace( EVALPOLY_TEMPLATE, '{{coefficient}}', str );\n\tstr = replace( str, '{{horner}}', horner );\n\tstr = replace( str, '{{dtype}}', opts.dtype );\n\tstr = replace( str, '{{dtype_suffix}}', opts.suffix );\n\treturn replace( str, '{{fname}}', opts.name );\n}\n\n\n// EXPORTS //\n\nmodule.exports = compile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compile a C function for evaluating a polynomial.\n*\n* @module @stdlib/math-base-tools-evalpoly-compile-c\n*\n* @example\n* var compile = require( '@stdlib/math-base-tools-evalpoly-compile-c' );\n*\n* var str = compile( [3.0,2.0,1.0] ); // 3*10^0 + 2*10^1 + 1*10^2\n* // returns <string>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "join", "readFile", "replace", "isInteger", "uppercase", "opts", "dir", "SINGLE_COEFFICIENT_TEMPLATE", "EVALPOLY_TEMPLATE", "EMPTY_TEMPLATE", "LOOP_TEMPLATE", "compile", "c", "options", "horner", "str", "n", "i", "main"]
}
